name: üîê Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        severity: warning
        check_together: 'yes'
        scandir: './scripts'
        format: gcc
        additional_files: 'install.sh'

    - name: Security hardening check
      run: |
        echo "üîç Checking for security hardening issues..."
        
        # Check for hardcoded secrets or tokens
        echo "Scanning for potential secrets..."
        if grep -r -i -E "(password|secret|token|key|api_key)" . --exclude-dir=.git --exclude="*.md" --exclude="*.yml" --exclude="*.yaml" | grep -v "placeholder\|example\|template\|<.*>"; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found. Please review."
          exit 1
        fi
        
        # Check script permissions
        echo "Checking script permissions..."
        for script in scripts/* install.sh; do
          if [ -f "$script" ]; then
            perms=$(stat -c "%a" "$script")
            if [ "$perms" != "755" ] && [ "$perms" != "644" ]; then
              echo "‚ö†Ô∏è Unusual permissions on $script: $perms"
            fi
          fi
        done
        
        # Check for world-writable files
        echo "Checking for world-writable files..."
        if find . -type f -perm -002 -not -path "./.git/*"; then
          echo "‚ö†Ô∏è World-writable files found"
          exit 1
        fi
        
        # Validate GPG usage patterns
        echo "Validating GPG security patterns..."
        if grep -r "gpg.*--trust-model.*always" . --exclude-dir=.git; then
          echo "‚ö†Ô∏è Dangerous GPG trust model found"
          exit 1
        fi
        
        echo "‚úÖ Security hardening checks passed"

    - name: Validate shell script security
      run: |
        echo "üîç Checking shell script security patterns..."
        
        # Check for dangerous patterns
        dangerous_patterns=(
          "eval.*\$"
          "exec.*\$"
          "\$\(.*curl.*\)"
          "wget.*\|.*sh"
          "bash.*<"
          "sh.*<"
        )
        
        for pattern in "${dangerous_patterns[@]}"; do
          if grep -r -E "$pattern" scripts/ install.sh; then
            echo "‚ö†Ô∏è Potentially dangerous pattern found: $pattern"
            echo "Please review for security implications"
          fi
        done
        
        # Check for proper input validation
        echo "Checking for input validation..."
        for script in scripts/* install.sh; do
          if [ -f "$script" ] && [ -x "$script" ]; then
            if ! grep -q "set -" "$script"; then
              echo "‚ö†Ô∏è $script missing error handling (set -e/set -u)"
            fi
          fi
        done
        
        echo "‚úÖ Shell script security validation complete"

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for vulnerable dependencies
      run: |
        echo "üîç Scanning for vulnerable system dependencies..."
        
        # Check if any scripts download external dependencies
        if grep -r -E "(curl|wget|pip|npm|apt|yum)" scripts/ install.sh; then
          echo "üìã External dependency usage detected:"
          grep -r -E "(curl|wget|pip|npm|apt|yum)" scripts/ install.sh || true
          echo ""
          echo "‚ö†Ô∏è Please ensure all external dependencies are:"
          echo "   - Downloaded over HTTPS"
          echo "   - Verified with checksums or signatures"
          echo "   - From trusted sources"
        fi
        
        # Check for package manager usage
        echo "Checking package manager security..."
        if grep -r "curl.*|.*sh\|wget.*|.*sh" scripts/ install.sh; then
          echo "‚ö†Ô∏è Dangerous pipe-to-shell pattern detected!"
          echo "This is a security risk. Consider alternative installation methods."
          exit 1
        fi
        
        echo "‚úÖ Dependency security scan complete"

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Custom secrets detection
      run: |
        echo "üîç Running custom secrets detection..."
        
        # Patterns to look for
        secret_patterns=(
          "ghp_[a-zA-Z0-9]{36}"
          "github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59}"
          "gho_[a-zA-Z0-9]{36}"
          "ghu_[a-zA-Z0-9]{36}"
          "ghs_[a-zA-Z0-9]{36}"
          "ghr_[a-zA-Z0-9]{36}"
          "-----BEGIN.*PRIVATE KEY-----"
          "ssh-rsa AAAA[0-9A-Za-z+/]+[=]{0,3}"
          "ssh-ed25519 AAAA[0-9A-Za-z+/]+[=]{0,3}"
        )
        
        for pattern in "${secret_patterns[@]}"; do
          if git log --all --grep="$pattern" --oneline; then
            echo "‚ö†Ô∏è Potential secret in commit history: $pattern"
          fi
          
          if grep -r -E "$pattern" . --exclude-dir=.git; then
            echo "‚ö†Ô∏è Potential secret in files: $pattern"
          fi
        done
        
        echo "‚úÖ Custom secrets detection complete"

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate security documentation
      run: |
        echo "üîç Validating security policy and documentation..."
        
        # Check required security files
        required_files=(
          "SECURITY.md"
          "docs/SECURITY_GUIDE.md"
          "docs/RECOVERY_GUIDE.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ö†Ô∏è Missing required security file: $file"
            exit 1
          fi
        done
        
        # Check that security documentation is comprehensive
        if ! grep -i "vulnerability" SECURITY.md; then
          echo "‚ö†Ô∏è SECURITY.md should include vulnerability reporting instructions"
          exit 1
        fi
        
        if ! grep -i "responsible disclosure" SECURITY.md; then
          echo "‚ö†Ô∏è SECURITY.md should include responsible disclosure policy"
          exit 1
        fi
        
        echo "‚úÖ Security policy validation complete"
